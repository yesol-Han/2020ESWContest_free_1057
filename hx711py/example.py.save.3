#! /usr/bin/python2

import time
import sys
import requests
import threading
import json
from datetime import datetime
from pytz import timezone

door = 0
user = ""
password = 0
weight = 0
RFID = "0"
def httprequest(second = 1.0):
	global door, user, password
	
	url = "http://114.71.221.47:7579/Mobius/control/door/la"

	payload = {}
	headers = {
  	'Accept': 'application/json',
  	'X-M2M-RI': '12345',
  	'X-M2M-Origin': 'C'
	}

	response = requests.request("GET", url, headers=headers, data = payload)
#	print(response.text.encode('utf8'))	
	door  = response.text.encode("utf8")
	door = json.loads(door)
	door = door["m2m:cin"]["con"]
	door = door.split(',')
	print("door:{0} user: {1} passwrod: {2}".format(door[0], door[1], door[2]))
	user = door[1]
	password = door[2]
	door = door[0]
	threading.Timer(second, httprequest, [second]).start()	

def security(tuple):
	global RFID
	now = str(tuple.tm_year) + str(tuple.tm_) + str(day) + "T" + str(hour) + str(minute) + str(second)
	print(tuple)
	url = "http://114.71.221.47:7579/Mobius/control/RFID?rcn=4&ty=4&cra=" + now
	
	payload = {}
	headers = {
  	'Accept': 'application/json',
  	'X-M2M-RI': '12345',
  	'X-M2M-Origin': 'C'
	}

	response = requests.request("GET", url, headers=headers, data = payload)
	
	print(response.text.encode('utf8'))
	RFID  = response.text.encode("utf8")
	print(RFID)
        RFID = json.loads(RFID)
	try: 
        	RFID = RFID["m2m:rsp"]["m2m:cin"]["con"]
        	print("RFID:{0}".format(RFID[0]))
	except:
		RFID = "0"
	
	return RFID

def weghithttp():
	global weight
	url = "http://114.71.221.47:7579/Mobius/control/weight/la"

        payload = {}
        headers = {
        'Accept': 'application/json',
        'X-M2M-RI': '12345',
        'X-M2M-Origin': 'C'
         }
        response = requests.request("GET", url, headers=headers, data = payload)

        weight = json.loads(response.text.encode('utf8'))
        weight = weight["m2m:cin"]["con"]
	print("weght:{0}".format(weight[0]))
	return weight

def errorhttp():
	url = "http://114.71.221.47:7579/Mobius/control/security"

	payload = "{\n    \"m2m:cin\": {\n        \"con\": \"1\"\n    }\n}"
	headers = {
  	'Accept': 'application/json',
  	'X-M2M-RI': '12345',
  	'X-M2M-Origin': 'C',
  	'Content-Type': 'application/vnd.onem2m-res+json; ty=4'
	}
	response = requests.request("POST", url, headers=headers, data = payload)
	print(response.text.encode('utf8'))
	
	url = "http://114.71.221.47:7579/Mobius/" + user + "/security"

	payload = "{\n    \"m2m:cin\": {\n        \"con\": \"1\"\n    }\n}"
	headers = {
  	'Accept': 'application/json',
  	'X-M2M-RI': '12345',
  	'X-M2M-Origin': password,
  	'Content-Type': 'application/vnd.onem2m-res+json; ty=4'
	}

	response = requests.request("POST", url, headers=headers, data = payload)
	print(response.text.encode('utf8'))

def weightchange():
	global weight

	url = "http://114.71.221.47:7579/Mobius/control/weight"

	payload = "{\n    \"m2m:cin\": {\n        \"con\": \"" +str(weight)+"\"\n    }\n}"
	headers = {
  	'Accept': 'application/json',
  	'X-M2M-RI': '12345',
  	'X-M2M-Origin': 'C',
  	'Content-Type': 'application/vnd.onem2m-res+json; ty=4'
	}

	response = requests.request("POST", url, headers=headers, data = payload)

	print(response.text.encode('utf8'))
	

	
EMULATE_HX711=False

referenceUnit = -441

if not EMULATE_HX711:
    import RPi.GPIO as GPIO
    from hx711 import HX711
else:
    from emulated_hx711 import HX711

def cleanAndExit():
    print("Cleaning...")

    if not EMULATE_HX711:
        GPIO.cleanup()
        
    print("Bye!")
    sys.exit()

hx = HX711(5, 6)

# I've found out that, for some reason, the order of the bytes is not always the same between versions of python, numpy and the hx711 itself.
# Still need to figure out why does it change.
# If you're experiencing super random values, change these values to MSB or LSB until to get more stable values.
# There is some code below to debug and log the order of the bits and the bytes.
# The first parameter is the order in which the bytes are used to build the "long" value.
# The second paramter is the order of the bits inside each byte.
# According to the HX711 Datasheet, the second parameter is MSB so you shouldn't need to modify it.
hx.set_reading_format("MSB", "MSB")

# HOW TO CALCULATE THE REFFERENCE UNIT
# To set the reference unit to 1. Put 1kg on your sensor or anything you have and know exactly how much it weights.
# In this case, 92 is 1 gram because, with 1 as a reference unit I got numbers near 0 without any weight
# and I got numbers around 184000 when I added 2kg. So, according to the rule of thirds:
# If 2000 grams is 184000 then 1000 grams is 184000 / 2000 = 92.
#hx.set_reference_unit(113)
hx.set_reference_unit(referenceUnit)

hx.reset()

hx.tare()

print("Tare done! Add weight now...")

# to use both channels, you'll need to tare them both
#hx.tare_A()
#hx.tare_B()

httprequest(1.0)
weightchange()
while True:
    try:
	print("door close")
        # These three lines are usefull to debug wether to use MSB or LSB in the reading formats
        # for the first parameter of "hx.set_reading_format("LSB", "MSB")".
        # Comment the two lines "val = hx.get_weight(5)" and "print val" and uncomment these three lines to see what it prints.
        
        # np_arr8_string = hx.get_np_arr8_string()
        # binary_string = hx.get_binary_string()
        # print binary_string + " " + np_arr8_string
        
        # Prints the weight. Comment if you're debbuging the MSB and LSB issue.
	if door == "1":
		print("door open")
		totalwieght = weghithttp()	
      		val = hx.get_weight(5)
                print("total:{0} nowweight: {1}".format(totalwieght, val))
		if val < float(totalwieght)-5:
			print("change weight : {0}".format(val))
			nownow = datetime.now(timezone('UTC'))
			nownow = nownow.

EMULATE_HX711=False


			while True:
				val = hx.get_weight(5)	
				s = security(tuple)
				#print(year, month, day, hour, minute, second)
				if door == '0' and s == '0':
				     	errorhttp()
					s = "0"
					break
				elif door == '0' and s == '1':
					weight = val
					s = "0" 
					weightchange()
					print("weightchange: {0}".format(weight))
					break
				elif door == '1' and (float(totalwieght) + 2 > val and float(totalwieght)-2 > val): 
					s = "0"			
					break		
       		print(val)

        # To get weight from both channels (if you have load cells hooked up 
        # to both channel A and B), do something like this
        #val_A = hx.get_weight_A(5)
        #val_B = hx.get_weight_B(5)
        #print "A: %s  B: %s" % ( val_A, val_B )

        hx.power_down()
        hx.power_up()
        time.sleep(0.1)

    except (KeyboardInterrupt, SystemExit):
        cleanAndExit()
